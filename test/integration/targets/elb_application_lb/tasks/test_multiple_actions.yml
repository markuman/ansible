- block:

  - name: set connection information for all tasks
    set_fact:
      aws_connection_info: &aws_connection_info
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        security_token: "{{ security_token }}"
        region: "{{ aws_region }}"
    no_log: yes

  - name: register dummy OIDC config
    set_fact:
        AuthenticateOidcActionConfig:
            AuthorizationEndpoint: "https://www.example.com/auth"
            ClientId: "eeeeeeeeeeeeeeeeeeeeeeeeee"
            ClientSecret: "eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"
            Issuer: "https://www.example.com/issuer"
            OnUnauthenticatedRequest: "authenticate"
            Scope: "openid"
            SessionCookieName: "AWSELBAuthSessionCookie"
            SessionTimeout: 604800
            TokenEndpoint: "https://www.example.com/token"
            UserInfoEndpoint: "https://www.example.com/userinfo"

  - name: create ALB with multiple DefaultActions
    elb_application_lb:
      name: "{{ alb_name }}"
      subnets: "{{ alb_subnets }}"
      security_groups: "{{ sec_group.group_id }}"
      state: present
      listeners:
        - Protocol: HTTPS
          Port: 443
          DefaultActions:
            - Type: forward
              TargetGroupName: "{{ tg_name }}"
              Order: 2
            - Type: authenticate-oidc
              AuthenticateOidcConfig: "{{ AuthenticateOidcActionConfig }}"
              Order: 1
          Certificates:
              - CertificateArn: "{{ cert_arn }}"
          SslPolicy: ELBSecurityPolicy-2016-08
      <<: *aws_connection_info
    register: alb

  - assert:
      that:
        - alb.changed
        - alb.listeners|length == 1
        - alb.listeners[0].rules|length == 2

  - name: test idempotence creating ALB with a listener
    elb_application_lb:
      name: "{{ alb_name }}"
      subnets: "{{ alb_subnets }}"
      security_groups: "{{ sec_group.group_id }}"
      state: present
      listeners:
        - Protocol: HTTPS
          Port: 443
          DefaultActions:
            - Type: forward
              TargetGroupName: "{{ tg_name }}"
              Order: 2
            - Type: authenticate-oidc
              AuthenticateOidcConfig: "{{ AuthenticateOidcActionConfig }}"
              Order: 1
          Certificates:
              - CertificateArn: "{{ cert_arn }}"
          SslPolicy: ELBSecurityPolicy-2016-08
      <<: *aws_connection_info
    register: alb

  - assert:
      that:
        - not alb.changed
        - alb.listeners|length == 1
        - alb.listeners[0].rules|length == 2

  - name: test changing order of actions
    elb_application_lb:
      name: "{{ alb_name }}"
      subnets: "{{ alb_subnets }}"
      security_groups: "{{ sec_group.group_id }}"
      state: present
      listeners:
        - Protocol: HTTPS
          Port: 443
          DefaultActions:
            - Type: authenticate-oidc
              AuthenticateOidcConfig: "{{ AuthenticateOidcActionConfig }}"
              Order: 1
            - Type: forward
              TargetGroupName: "{{ tg_name }}"
              Order: 2
          Certificates:
              - CertificateArn: "{{ cert_arn }}"
          SslPolicy: ELBSecurityPolicy-2016-08
      <<: *aws_connection_info
    register: alb

  - assert:
      that:
        - not alb.changed
        - alb.listeners|length == 1
        - alb.listeners[0].rules|length == 1

  - name: test non-default rule with multiple actions
    elb_application_lb:
      name: "{{ alb_name }}"
      subnets: "{{ alb_subnets }}"
      security_groups: "{{ sec_group.group_id }}"
      state: present
      listeners:
        - Protocol: HTTPS
          Port: 443
          DefaultActions:
            - Type: authenticate-oidc
              AuthenticateOidcConfig: "{{ AuthenticateOidcActionConfig }}"
              Order: 1
            - Type: forward
              TargetGroupName: "{{ tg_name }}"
              Order: 2
          Certificates:
            - CertificateArn: "{{ cert_arn }}"
          SslPolicy: ELBSecurityPolicy-2016-08
          Rules:
            - Conditions:
                - Field: path-pattern
                  Values:
                    - "*"
              Priority: 1
              Actions:
                - Type: forward
                  TargetGroupName: "{{ tg_name }}"
                  Order: 2
                - Type: authenticate-oidc
                  AuthenticateOidcConfig: "{{ AuthenticateOidcActionConfig }}"
                  Order: 1
      <<: *aws_connection_info
    register: alb

  - assert:
      that:
        - alb.changed
        - alb.listeners|length == 1
        - alb.listeners[0].rules|length == 2
        - alb.listeners[1].rules|length == 2

  - name: test idempotency non-default rule with multiple actions
    elb_application_lb:
      name: "{{ alb_name }}"
      subnets: "{{ alb_subnets }}"
      security_groups: "{{ sec_group.group_id }}"
      state: present
      listeners:
        - Protocol: HTTPS
          Port: 443
          DefaultActions:
            - Type: authenticate-oidc
              AuthenticateOidcConfig: "{{ AuthenticateOidcActionConfig }}"
              Order: 1
            - Type: forward
              TargetGroupName: "{{ tg_name }}"
              Order: 2
          Certificates:
            - CertificateArn: "{{ cert_arn }}"
          SslPolicy: ELBSecurityPolicy-2016-08
          Rules:
            - Conditions:
                - Field: path-pattern
                  Values:
                    - "*"
              Priority: 1
              Actions:
                - Type: forward
                  TargetGroupName: "{{ tg_name }}"
                  Order: 2
                - Type: authenticate-oidc
                  AuthenticateOidcConfig: "{{ AuthenticateOidcActionConfig }}"
                  Order: 1
      <<: *aws_connection_info
    register: alb

  - assert:
      that:
        - not alb.changed
        - alb.listeners|length == 1
        - alb.listeners[0].rules|length == 2
        - alb.listeners[1].rules|length == 2

  - name: test non-default rule action order change
    elb_application_lb:
      name: "{{ alb_name }}"
      subnets: "{{ alb_subnets }}"
      security_groups: "{{ sec_group.group_id }}"
      state: present
      listeners:
        - Protocol: HTTPS
          Port: 443
          DefaultActions:
            - Type: authenticate-oidc
              AuthenticateOidcConfig: "{{ AuthenticateOidcActionConfig }}"
              Order: 1
            - Type: forward
              TargetGroupName: "{{ tg_name }}"
              Order: 2
          Certificates:
            - CertificateArn: "{{ cert_arn }}"
          SslPolicy: ELBSecurityPolicy-2016-08
          Rules:
            - Conditions:
                - Field: path-pattern
                  Values:
                    - "*"
              Priority: 1
              Actions:
                - Type: authenticate-oidc
                  AuthenticateOidcConfig: "{{ AuthenticateOidcActionConfig }}"
                  Order: 1
                - Type: forward
                  TargetGroupName: "{{ tg_name }}"
                  Order: 2
      <<: *aws_connection_info
    register: alb

  - assert:
      that:
        - not alb.changed
        - alb.listeners|length == 1
        - alb.listeners[0].rules|length == 2
        - alb.listeners[1].rules|length == 2
